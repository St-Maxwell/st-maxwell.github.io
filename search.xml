<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>电子积分库Libcint的用法</title>
    <url>/use-libcint/</url>
    <content><![CDATA[<p><a href="https://github.com/sunqm/libcint" target="_blank" rel="noopener">libcint</a>是Sun Qiming写的电子积分库，有Fortran接口。我想以后使用它写点小玩意。现在先尝试搞懂它的用法，并分享自己的一点经验。</p>
<p>当然最重要的是看libcint自己的手册（和GitHub仓库里的例子），然后可以参考这篇文章：<a href="https://mp.weixin.qq.com/s/AULtH_7iPnaA8g5y46T_HQ" target="_blank" rel="noopener">Libcint电子积分库使用教程</a><br><a id="more"></a><br>计算积分前要先将每一个primitive Gaussian函数（直接从基组文件里读取的）归一化，然后将重叠矩阵的对角元归一化。</p>
<p>调用<code>CINTgto_norm</code>函数，它接受primitive Gaussian函数的总角动量<code>angl</code>（笛卡尔型Gaussian函数的总角动量$l=l_x+l_y+l_z$）和指数项<code>expnt</code>（$\alpha$）。乘到primitive Gaussian函数对应的收缩系数<code>cntr_coeff</code>即可。<br><figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">cntr_coeff = cntr_coeff * CINTgto_norm(angl, expnt)</span><br></pre></td></tr></table></figure></p>
<p>我写了一个简单的测试（比较随意，有些地方是写死的），计算了水分子的def2-SVP基组的电子积分。</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span> mod_info</span><br><span class="line">    <span class="keyword">use</span> <span class="keyword">iso_fortran_env</span>, <span class="keyword">only</span>: r8 =&gt; real64</span><br><span class="line">    <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">! molecule: water</span></span><br><span class="line">    <span class="comment">! basis set: def2-SVP</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">integer</span>, <span class="keyword">parameter</span> :: natm = <span class="number">3</span></span><br><span class="line">    <span class="keyword">integer</span>, <span class="keyword">parameter</span> :: nshl = <span class="number">12</span></span><br><span class="line">    <span class="keyword">integer</span>, <span class="keyword">parameter</span> :: nprm = <span class="number">22</span></span><br><span class="line">    <span class="keyword">integer</span>, <span class="keyword">parameter</span> :: nbas = <span class="number">24</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">integer</span>, <span class="keyword">dimension</span>(nshl), <span class="keyword">parameter</span> :: cntr_odr = &amp;</span><br><span class="line">    [<span class="number">5</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">integer</span>, <span class="keyword">dimension</span>(nshl), <span class="keyword">parameter</span> :: angl = &amp;</span><br><span class="line">    [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">integer</span>, <span class="keyword">dimension</span>(nshl), <span class="keyword">parameter</span> :: shl_belong_to_atom = &amp;</span><br><span class="line">    [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">3</span>]</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">integer</span>, <span class="keyword">dimension</span>(nshl), <span class="keyword">parameter</span> :: sh_indx = &amp;</span><br><span class="line">    [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">7</span>,<span class="number">10</span>,<span class="number">15</span>,<span class="number">16</span>,<span class="number">17</span>,<span class="number">20</span>,<span class="number">21</span>,<span class="number">22</span>]</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">real</span>(<span class="keyword">kind</span>=r8), <span class="keyword">dimension</span>(nprm), <span class="keyword">parameter</span> :: expnt = &amp;</span><br><span class="line">    [ <span class="number">2266.1767785</span>, <span class="number">340.87010191</span>, <span class="number">77.363135167</span>, &amp;</span><br><span class="line">      <span class="number">21.479644940</span>, <span class="number">6.6589433124</span>, <span class="number">0.80975975668</span>, &amp;</span><br><span class="line">      <span class="number">0.25530772234</span>, <span class="number">17.721504317</span>, <span class="number">3.8635505440</span>, &amp;</span><br><span class="line">      <span class="number">1.0480920883</span>, <span class="number">0.27641544411</span>, <span class="number">1.2000000</span>, &amp;</span><br><span class="line">      <span class="number">13.0107010</span>, <span class="number">1.9622572</span>, <span class="number">0.44453796</span>, &amp;</span><br><span class="line">      <span class="number">0.12194962</span>, <span class="number">0.8000000</span>, <span class="number">13.0107010</span>, &amp;</span><br><span class="line">      <span class="number">1.9622572</span>, <span class="number">0.44453796</span>, <span class="number">0.12194962</span>, &amp;</span><br><span class="line">      <span class="number">0.8000000</span> ]</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">real</span>(<span class="keyword">kind</span>=r8), <span class="keyword">dimension</span>(nprm), <span class="keyword">parameter</span> :: coeff = &amp;</span><br><span class="line">    [ -<span class="number">0.53431809926E-02</span>, -<span class="number">0.39890039230E-01</span>, -<span class="number">0.17853911985</span>, &amp;</span><br><span class="line">      -<span class="number">0.46427684959</span>, -<span class="number">0.44309745172</span>, <span class="number">1.0000000</span>, &amp;</span><br><span class="line">      <span class="number">1.0000000</span>, <span class="number">0.43394573193E-01</span>, <span class="number">0.23094120765</span>, &amp;</span><br><span class="line">      <span class="number">0.51375311064</span>, <span class="number">1.0000000</span>, <span class="number">1.0000000</span>, &amp;</span><br><span class="line">      <span class="number">0.19682158E-01</span>, <span class="number">0.13796524</span>, <span class="number">0.47831935</span>, &amp;</span><br><span class="line">      <span class="number">1.0000000</span>, <span class="number">1.0000000</span>, <span class="number">0.19682158E-01</span>, &amp;</span><br><span class="line">      <span class="number">0.13796524</span>, <span class="number">0.47831935</span>, <span class="number">1.0000000</span>, &amp;</span><br><span class="line">      <span class="number">1.0000000</span> ]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">real</span>(<span class="keyword">kind</span>=r8), <span class="keyword">dimension</span>(<span class="number">3</span>,natm), <span class="keyword">parameter</span> :: geom = <span class="built_in">reshape</span>(&amp;</span><br><span class="line">    [ <span class="number">0.00000000</span>, -<span class="number">0.00000000</span>, -<span class="number">0.11085125</span>, &amp;</span><br><span class="line">      <span class="number">0.00000000</span>, -<span class="number">0.78383672</span>, <span class="number">0.44340501</span>, &amp;</span><br><span class="line">      <span class="number">0.00000000</span>, <span class="number">0.78383672</span>, <span class="number">0.44340501</span> ], [<span class="number">3</span>,natm])</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">integer</span>, <span class="keyword">dimension</span>(natm), <span class="keyword">parameter</span> :: charge = [<span class="number">8</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">module</span> mod_info</span><br><span class="line"></span><br><span class="line"><span class="keyword">module</span> mod_libcint</span><br><span class="line">    <span class="keyword">use</span> mod_info</span><br><span class="line">    <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">integer</span>, <span class="keyword">dimension</span>(:,:), <span class="keyword">allocatable</span> :: atm</span><br><span class="line">    <span class="keyword">integer</span>, <span class="keyword">dimension</span>(:,:), <span class="keyword">allocatable</span> :: bas</span><br><span class="line">    <span class="keyword">real</span>(<span class="keyword">kind</span>=r8), <span class="keyword">dimension</span>(:), <span class="keyword">allocatable</span> :: env</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">integer</span>, <span class="keyword">parameter</span> :: CHARGE_OF  = <span class="number">1</span></span><br><span class="line">    <span class="keyword">integer</span>, <span class="keyword">parameter</span> :: PTR_COORD  = <span class="number">2</span></span><br><span class="line">    <span class="keyword">integer</span>, <span class="keyword">parameter</span> :: NUC_MOD_OF = <span class="number">3</span></span><br><span class="line">    <span class="keyword">integer</span>, <span class="keyword">parameter</span> :: PTR_ZETA   = <span class="number">4</span></span><br><span class="line">    <span class="keyword">integer</span>, <span class="keyword">parameter</span> :: ATM_SLOTS  = <span class="number">6</span></span><br><span class="line">    <span class="keyword">integer</span>, <span class="keyword">parameter</span> :: ATOM_OF    = <span class="number">1</span></span><br><span class="line">    <span class="keyword">integer</span>, <span class="keyword">parameter</span> :: ANG_OF     = <span class="number">2</span></span><br><span class="line">    <span class="keyword">integer</span>, <span class="keyword">parameter</span> :: NPRIM_OF   = <span class="number">3</span></span><br><span class="line">    <span class="keyword">integer</span>, <span class="keyword">parameter</span> :: NCTR_OF    = <span class="number">4</span></span><br><span class="line">    <span class="keyword">integer</span>, <span class="keyword">parameter</span> :: KAPPA_OF   = <span class="number">5</span></span><br><span class="line">    <span class="keyword">integer</span>, <span class="keyword">parameter</span> :: PTR_EXP    = <span class="number">6</span></span><br><span class="line">    <span class="keyword">integer</span>, <span class="keyword">parameter</span> :: PTR_COEFF  = <span class="number">7</span></span><br><span class="line">    <span class="keyword">integer</span>, <span class="keyword">parameter</span> :: BAS_SLOTS  = <span class="number">8</span></span><br><span class="line">    <span class="keyword">integer</span>, <span class="keyword">parameter</span> :: PTR_ENV_START = <span class="number">20</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">contains</span></span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">subroutine</span></span> set_libcint_input()</span><br><span class="line">        <span class="keyword">integer</span> :: off, prim_off</span><br><span class="line">        <span class="keyword">integer</span> :: iatom, ishl, iprim, ioff</span><br><span class="line">        <span class="keyword">real</span>(<span class="keyword">kind</span>=r8), <span class="keyword">external</span> :: CINTgto_norm</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">allocate</span>(atm(ATM_SLOTS,natm))</span><br><span class="line">        <span class="built_in">allocate</span>(bas(BAS_SLOTS,nshl))</span><br><span class="line">        <span class="built_in">allocate</span>(env(PTR_ENV_START+<span class="number">3</span>*natm+<span class="number">2</span>*nprm))</span><br><span class="line">  </span><br><span class="line">        off = PTR_ENV_START</span><br><span class="line">        <span class="keyword">do</span> iatom = <span class="number">1</span>, natm</span><br><span class="line">            atm(CHARGE_OF,iatom) = charge(iatom)</span><br><span class="line">            atm(PTR_COORD,iatom) = off</span><br><span class="line">            atm(NUC_MOD_OF,iatom) = <span class="number">1</span></span><br><span class="line">            env(off+<span class="number">1</span>:) = geom(:,iatom)</span><br><span class="line">            off = off + <span class="number">3</span></span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">  </span><br><span class="line">        prim_off = <span class="number">1</span></span><br><span class="line">        <span class="keyword">do</span> ishl = <span class="number">1</span>, nshl</span><br><span class="line">            bas(ATOM_OF,ishl) = shl_belong_to_atom(ishl) - <span class="number">1</span></span><br><span class="line">            bas(ANG_OF,ishl) = angl(ishl)</span><br><span class="line">            bas(NPRIM_OF,ishl) = cntr_odr(ishl)</span><br><span class="line">            bas(NCTR_OF,ishl) = <span class="number">1</span></span><br><span class="line">  </span><br><span class="line">            bas(PTR_EXP,ishl) = off</span><br><span class="line">            ioff = <span class="number">0</span></span><br><span class="line">            <span class="keyword">do</span> iprim = prim_off, prim_off + cntr_odr(ishl)-<span class="number">1</span></span><br><span class="line">                env(off+<span class="number">1</span>+ioff) = expnt(iprim)</span><br><span class="line">                ioff = ioff + <span class="number">1</span></span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">  </span><br><span class="line">            off = off + cntr_odr(ishl)</span><br><span class="line">  </span><br><span class="line">            bas(PTR_COEFF,ishl) = off</span><br><span class="line">            ioff = <span class="number">0</span></span><br><span class="line">            <span class="keyword">do</span> iprim = prim_off, prim_off + cntr_odr(ishl)-<span class="number">1</span></span><br><span class="line">                env(off+<span class="number">1</span>+ioff) = coeff(iprim) * CINTgto_norm(angl(ishl), expnt(iprim))</span><br><span class="line">                ioff = ioff + <span class="number">1</span></span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">  </span><br><span class="line">            off = off + cntr_odr(ishl)</span><br><span class="line">  </span><br><span class="line">            prim_off = prim_off + cntr_odr(ishl)</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">end</span> <span class="function"><span class="keyword">subroutine</span></span> set_libcint_input</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">subroutine</span></span> normalize()</span><br><span class="line">        <span class="keyword">integer</span> :: ishl, iprim</span><br><span class="line">        <span class="keyword">integer</span> :: di, dj</span><br><span class="line">        <span class="keyword">real</span>(<span class="keyword">kind</span>=r8), <span class="keyword">dimension</span>(:,:), <span class="keyword">allocatable</span> :: buf1e</span><br><span class="line">        <span class="keyword">integer</span>, <span class="keyword">dimension</span>(<span class="number">2</span>) :: shls</span><br><span class="line">        <span class="keyword">integer</span>, <span class="keyword">external</span> :: CINTcgto_spheric</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">do</span> ishl = <span class="number">1</span>, nshl</span><br><span class="line">            shls(<span class="number">1</span>) = ishl - <span class="number">1</span></span><br><span class="line">            shls(<span class="number">2</span>) = ishl - <span class="number">1</span></span><br><span class="line">            di = CINTcgto_spheric(ishl-<span class="number">1</span>, bas)</span><br><span class="line">            dj = CINTcgto_spheric(ishl-<span class="number">1</span>, bas)</span><br><span class="line">            <span class="built_in">allocate</span>(buf1e(di,dj))</span><br><span class="line">            <span class="keyword">call</span> cint1e_ovlp_sph(buf1e,shls,atm,natm,bas,nshl,env)</span><br><span class="line">            <span class="keyword">do</span> iprim = <span class="number">1</span>, cntr_odr(ishl)</span><br><span class="line">                env(bas(PTR_COEFF,ishl)+iprim) = env(bas(PTR_COEFF,ishl)+iprim) / <span class="built_in">sqrt</span>(buf1e(<span class="number">1</span>,<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">            <span class="built_in">deallocate</span>(buf1e)</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">end</span> <span class="function"><span class="keyword">subroutine</span></span> normalize</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">module</span> mod_libcint</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">program</span></span> main</span><br><span class="line">    <span class="keyword">use</span> mod_info</span><br><span class="line">    <span class="keyword">use</span> mod_libcint</span><br><span class="line">    <span class="keyword">implicit</span> <span class="keyword">none</span></span><br><span class="line">    <span class="keyword">integer</span> :: i, j, k, l, di, dj, dk, dl, x, y, z, w</span><br><span class="line">    <span class="keyword">real</span>(<span class="keyword">kind</span>=r8), <span class="keyword">dimension</span>(nbas,nbas) :: S</span><br><span class="line">    <span class="keyword">real</span>(<span class="keyword">kind</span>=r8), <span class="keyword">dimension</span>(nbas,nbas) :: T</span><br><span class="line">    <span class="keyword">real</span>(<span class="keyword">kind</span>=r8), <span class="keyword">dimension</span>(nbas,nbas) :: V</span><br><span class="line">    <span class="keyword">real</span>(<span class="keyword">kind</span>=r8), <span class="keyword">dimension</span>(nbas,nbas,nbas,nbas) :: eri</span><br><span class="line">    <span class="keyword">real</span>(<span class="keyword">kind</span>=r8), <span class="keyword">dimension</span>(:,:), <span class="keyword">allocatable</span> :: buf1e</span><br><span class="line">    <span class="keyword">real</span>(<span class="keyword">kind</span>=r8), <span class="keyword">dimension</span>(:,:,:,:), <span class="keyword">allocatable</span> :: buf2e</span><br><span class="line">    <span class="keyword">integer</span>, <span class="keyword">dimension</span>(<span class="number">4</span>) :: shls</span><br><span class="line">    <span class="keyword">integer</span>, <span class="keyword">external</span> :: CINTcgto_spheric</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">call</span> set_libcint_input()</span><br><span class="line">    <span class="keyword">call</span> normalize()</span><br><span class="line">  </span><br><span class="line">    open(<span class="number">11</span>, <span class="keyword">file</span>=<span class="string">"int.txt"</span>)</span><br><span class="line">    <span class="built_in">write</span>(<span class="number">11</span>,*) atm(CHARGE_OF,:) </span><br><span class="line">    <span class="built_in">write</span>(<span class="number">11</span>,*) atm(PTR_COORD,:) </span><br><span class="line">    <span class="built_in">write</span>(<span class="number">11</span>,*) atm(NUC_MOD_OF,:)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span> i = <span class="number">1</span>, nshl</span><br><span class="line">        <span class="built_in">write</span>(<span class="number">11</span>,<span class="string">"(*(I4))"</span>) bas(ATOM_OF,i), bas(ANG_OF,i), bas(NPRIM_OF,i), &amp;</span><br><span class="line">                            bas(NCTR_OF,i), bas(PTR_EXP,i), bas(PTR_COEFF,i)</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">do</span> i = <span class="number">1</span>, <span class="built_in">size</span>(env)</span><br><span class="line">        <span class="built_in">write</span>(<span class="number">11</span>,*) i, env(i)</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">do</span> i = <span class="number">1</span>, nshl</span><br><span class="line">        shls(<span class="number">1</span>) = i - <span class="number">1</span></span><br><span class="line">        di = CINTcgto_spheric(i-<span class="number">1</span>, bas)</span><br><span class="line">        <span class="keyword">do</span> j = <span class="number">1</span>, nshl</span><br><span class="line">            shls(<span class="number">2</span>) = j - <span class="number">1</span></span><br><span class="line">            dj = CINTcgto_spheric(j-<span class="number">1</span>, bas)</span><br><span class="line">            <span class="built_in">allocate</span>(buf1e(di,dj))</span><br><span class="line">            x = sh_indx(i); y = sh_indx(j)</span><br><span class="line">            <span class="keyword">call</span> cint1e_ovlp_sph(buf1e,shls,atm,natm,bas,nshl,env)</span><br><span class="line">            S(x:,y:) = buf1e(:,:)</span><br><span class="line">            <span class="keyword">call</span> cint1e_kin_sph(buf1e,shls,atm,natm,bas,nshl,env)</span><br><span class="line">            T(x:,y:) = buf1e(:,:)</span><br><span class="line">            <span class="keyword">call</span> cint1e_nuc_sph(buf1e,shls,atm,natm,bas,nshl,env)</span><br><span class="line">            V(x:,y:) = buf1e(:,:)</span><br><span class="line">            <span class="built_in">deallocate</span>(buf1e)</span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">do</span> i = <span class="number">1</span>, nshl</span><br><span class="line">      shls(<span class="number">1</span>) = i - <span class="number">1</span></span><br><span class="line">      di = CINTcgto_spheric(i-<span class="number">1</span>, bas)</span><br><span class="line">      <span class="keyword">do</span> j = <span class="number">1</span>, nshl</span><br><span class="line">          shls(<span class="number">2</span>) = j - <span class="number">1</span></span><br><span class="line">          dj = CINTcgto_spheric(j-<span class="number">1</span>, bas)</span><br><span class="line">          <span class="keyword">do</span> k = <span class="number">1</span>, nshl</span><br><span class="line">              shls(<span class="number">3</span>) = k - <span class="number">1</span></span><br><span class="line">              dk = CINTcgto_spheric(k-<span class="number">1</span>, bas)</span><br><span class="line">              <span class="keyword">do</span> l = <span class="number">1</span>, nshl</span><br><span class="line">                  shls(<span class="number">4</span>) = l - <span class="number">1</span></span><br><span class="line">                  dl = CINTcgto_spheric(l-<span class="number">1</span>, bas)</span><br><span class="line">                  <span class="built_in">allocate</span>(buf2e(di,dj,dk,dl))</span><br><span class="line">                  x = sh_indx(i); y = sh_indx(j)</span><br><span class="line">                  z = sh_indx(k); w = sh_indx(l)</span><br><span class="line">                  <span class="keyword">call</span> cint2e_sph(buf2e,shls,atm,natm,bas,nshl,env,<span class="number">0</span>_8)</span><br><span class="line">                  eri(x:,y:,z:,w:) = buf2e(:,:,:,:)</span><br><span class="line">                  <span class="built_in">deallocate</span>(buf2e)</span><br><span class="line">              <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">          <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">      <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">do</span> i = <span class="number">1</span>, nbas</span><br><span class="line">        <span class="built_in">write</span>(<span class="number">11</span>,<span class="string">"(*(F15.10))"</span>) S(i,:)</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">write</span>(<span class="number">11</span>,*)</span><br><span class="line">    <span class="keyword">do</span> i = <span class="number">1</span>, nbas</span><br><span class="line">        <span class="built_in">write</span>(<span class="number">11</span>,<span class="string">"(*(F15.10))"</span>) T(i,:)</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">write</span>(<span class="number">11</span>,*)</span><br><span class="line">    <span class="keyword">do</span> i = <span class="number">1</span>, nbas</span><br><span class="line">        <span class="built_in">write</span>(<span class="number">11</span>,<span class="string">"(*(F15.10))"</span>) V(i,:)</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">write</span>(<span class="number">11</span>,*)</span><br><span class="line">    <span class="keyword">do</span> i = <span class="number">1</span>, nbas</span><br><span class="line">        <span class="keyword">do</span> j = <span class="number">1</span>, nbas</span><br><span class="line">            <span class="keyword">do</span> k = <span class="number">1</span>, nbas</span><br><span class="line">                <span class="built_in">write</span>(<span class="number">11</span>,<span class="string">"(*(F15.10))"</span>) eri(i,j,k,:)</span><br><span class="line">            <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">do</span></span><br><span class="line">    close(<span class="number">11</span>)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">end</span> <span class="function"><span class="keyword">program</span></span> main</span><br></pre></td></tr></table></figure>
<p>我们可以用Psi4的电子积分做对比。有些矩阵元的顺序不一样，这个很正常（2p壳层的3个基函数的顺序不同）。</p>
<p>Psi4获得电子积分的代码<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> psi4</span><br><span class="line"></span><br><span class="line">mol = psi4.geometry(<span class="string">'''</span></span><br><span class="line"><span class="string">    O  0.00000000  -0.00000000 -0.11085125</span></span><br><span class="line"><span class="string">    H  0.00000000  -0.78383672  0.44340501</span></span><br><span class="line"><span class="string">    H  0.00000000   0.78383672  0.44340501</span></span><br><span class="line"><span class="string">    unit = au</span></span><br><span class="line"><span class="string">'''</span>)</span><br><span class="line">basis_set = <span class="string">"def2-SVP"</span></span><br><span class="line"></span><br><span class="line">wfn = psi4.core.Wavefunction.build(mol, basis_set)</span><br><span class="line">mints = psi4.core.MintsHelper(wfn.basisset())</span><br><span class="line"></span><br><span class="line"><span class="comment"># get integrals from psi4 module</span></span><br><span class="line">Enuc = mol.nuclear_repulsion_energy()</span><br><span class="line">S = np.asarray(mints.ao_overlap())</span><br><span class="line">V = np.asarray(mints.ao_potential())</span><br><span class="line">T = np.asarray(mints.ao_kinetic())</span><br><span class="line">I = np.asarray(mints.ao_eri())</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>量子化学</category>
      </categories>
      <tags>
        <tag>Fortran</tag>
        <tag>量化编程</tag>
        <tag>Libcint</tag>
      </tags>
  </entry>
</search>
